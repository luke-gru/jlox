module Enumerable {
  filter(fn) {
    var ret = Array();
    this.each(fun(k) {
      if (fn(k)) {
        ret.push(k);
      }
    });
    return ret;
  }

  reject(fn) {
    var ret = Array();
    this.each(fun(k) {
      if (!fn(k)) {
        ret.push(k);
      }
    });
    return ret;
  }

  first(fn = nil) {
    var ret = nil;
    var cont = true;
    this.each(fun(k) {
      if (!cont) return;
      if ((fn && fn(k)) || !fn) {
        ret = k;
        cont = false;
      }
    });
    return ret;
  }

  last(fn = nil) {
    var ret = nil;
    this.each(fun(k) {
      if ((fn && fn(k)) || !fn) {
        ret = k;
      }
    });
    return ret;
  }
}

Array.include(Enumerable);
Map.include(Enumerable);

fun benchmark(callback, iterations: 1000, times: 2) {
  var secsTaken = [];
  for (var i = 0; i < times; i += 1) {
    var start = clock();
    for (var j = 0; j < iterations; j += 1) {
      callback();
    }
    var end = clock();
    secsTaken.push(end - start);
  }
  var sumTime = 0.0;
  foreach (time in secsTaken) {
    sumTime += time;
  }
  return sumTime / secsTaken.length;
}
